<?xml version="1.0"?>

<launch>


  <arg name="voxel_size" default="0.05"/>

<!-- part 3 voxblox tsdf server-->
  <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr" clear_params="true">
    <remap from="pointcloud" to="/gripper_rgbd_cam/depth/points"/>
    <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side" value="16" />
    <param name="voxel_carving_enabled" value="true" />
    <param name="color_mode" value="color" />

    <!-- Input Transform Parameters-->

    <param name="truncation_distance" value="0.40" />
    <param name="use_tf_transforms" value="true" />
    <param name="timestamp_tolerance_sec" value="5.0" />
    <param name="pointcloud_queue_size" value="20" />
    <param name="color_mode" value="normals" />
    <param name="world_frame" value = "odom" />
    <!--param name="sensor_frame" value="" /-->
    <param name="mesh_min_weight" value="2" />
    <param name="max_ray_length_m" value="10.0" />

    <param name="update_mesh_every_n_sec" value="0.0" />
    <param name="min_time_between_msgs_sec" value="0.0" />
    <param name="method" value="fast" />
    <param name="use_const_weight" value="false" />
    <param name="allow_clear" value="true" />
    <param name="verbose" value="true" />
    <rosparam file="$(find voxblox_ros)/cfg/cow_and_lady.yaml"/>
    <param name="mesh_filename" value="$(find voxblox_ros)/mesh_results/$(anon cow).ply" />
    <param name="output_mesh_as_pointcloud" value="false" />

    <!-- other parameters -->

    <param name="publish_pointclouds" value="true" />
    <param name="publish_tsdf_map" value="true" />
    <!-- ESDF Integrator Parameters -->
    <param name="esdf_max_distance_m" value="2.0" />
    <param name="esdf_default_distance_m" value="2.0" />
    <param name="clear_sphere_for_planning" value="false" />
    <param name="clear_sphere_radius" value="1.5" />
    <param name="occupied_sphere_radius" value="5.0" />

  </node>

<!-- open rviz -->

  <node name="tf_world_set" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 1 world my_frame 10" />
  <node name="visulazation" pkg="rviz" type="rviz" args="-f odom -d $(find stair_detection)/config/IP_Project.rviz" />
<!-- load map -->
  <node pkg="rosservice" type="rosservice" name="init_layer" args="call /voxblox_node/load_map $(find stair_detection)/saved_layer/big_truncation.vxblx"/> 
</launch>

